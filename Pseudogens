def calculate_pseudogens_optimized(self, reverse=False):
    """
    This is the current best algorithm!
    """
    import networkx as nx
    
    # —0— collect structures
    g_dag     = self.og_graph_without_marrs
    marriages = set(self.og_marriage_edges)
    parents   = {v: list(g_dag.predecessors(v)) for v in g_dag.nodes()}
    children  = {v: list(g_dag.successors(v))   for v in g_dag.nodes()}
    
    # —1— raw bottom‐up layering
    G_raw = {v: 0 for v in g_dag.nodes()}
    topo  = list(nx.topological_sort(g_dag))
    for child in reversed(topo):
        for p in parents[child]:
            G_raw[p] = max(G_raw[p], G_raw[child] + 1)
    
    # —2— identify “immigrants”
    rev            = g_dag.reverse(copy=False)
    parentless     = {v for v, nbrs in rev.adj.items() if not nbrs}
    self.parentless = parentless
    
    # —3— invert into gen‐space (0=oldest, ↑=younger)
    if not reverse:
        top_raw = max(G_raw.values(), default=0)
        G = {v: top_raw - G_raw[v] for v in G_raw}
    else:
        G = dict(G_raw)
    
    # —4— PASS B: parentless‐spouse inheritance
    for u, v in marriages:
        if u in parentless:
            G[u] = G[v]
        if v in parentless:
            G[v] = G[u]
    
    # —5— PASS C: enforce child = max(parent) + 1
    for v in g_dag.nodes():
        if parents[v]:
            G[v] = max(G[p] for p in parents[v]) + 1
    
    # —6— densify to 0,1,2,… with no gaps
    layers = sorted(set(G.values()))
    remap  = {old: new for new, old in enumerate(layers)}
    dense  = {v: remap[G[v]] for v in G}
    
    # —6— PASS D: linear densify (bucket‐sort style)
    # nodes   = list(G.keys())
    # raw_min = min(G[v] for v in nodes)
    # raw_max = max(G[v] for v in nodes)
    # R       = raw_max - raw_min + 1
    
    # buckets = [[] for _ in range(R)]
    # for v in nodes:
    #     buckets[G[v] - raw_min].append(v)
    
    # dense = {}
    # gen   = 0
    # for bucket in buckets:
    #     if not bucket:
    #         continue
    #     for v in bucket:
    #         dense[v] = gen
    #     gen += 1
    
    # —7— PASS D: immigrant‐spouse cleanup
    for u, v in marriages:
        if u in parentless:
            dense[u] = dense[v]
        if v in parentless:
            dense[v] = dense[u]
    
    # —8— PASS E: component bottom‐leaf alignment
    #    Lift each undirected component so its deepest leaf = global max
    global_max = max(dense.values(), default=0)
    for comp in nx.connected_components(g_dag.to_undirected()):
        # find leaves (childless nodes) in this comp
        leaves = [v for v in comp if not children[v]]
        if not leaves:
            continue
        comp_max = max(dense[v] for v in leaves)
        shift    = global_max - comp_max
        if shift:
            for w in comp:
                dense[w] += shift
    
    # —7— PASS D: immigrant‐spouse cleanup
    for u, v in marriages:
        if u in parentless:
            dense[u] = dense[v]
        if v in parentless:
            dense[v] = dense[u]
    
    # —9— save & return
    self.node_to_gen = dense
    self.final_gen   = max(dense.values(), default=0)
    return dense



from get_model_parameters import get_names
def test_all_networks_for_suitability():
    actual = []
    names = get_names()
    for i in range(len(names)):
        names[i] = names[i][30:-13]
    processed_num = 0
    for name in names:
        print(f"\n--- Processing {name} ---\nTotal Completed:  {processed_num}/{len(names)}")
        processed_num += 1
        try:
            pop = Model(name, two_sided_dist=True)
            print("✅ Success")
        except Exception as e:
            # Print exception type, message, and full traceback
            print(f"❗ {type(e).__name__} in {name}: {e}")
            actual.append(name)
            # print(traceback.format_exc())
            # Continue to next dataset
            continue

    print(f"actual:  {actual}")
    print(f"{len(actual)}/{len(names)}")

def visualize_networks():
    from get_model_parameters import get_names
    names = get_names()

    # Best two networks.
    pop = Model('family', intergen=False, two_sided_dist=False, experiment=True, vis=True)
    pop = Model('dogon-konsogu-donyu', intergen=False, two_sided_dist=False, experiment=True, vis=True)

    # First three in this list iteration do not have cycles (the fourth does).
    # The first network is the same one I sent in the Discord (the image with clean lineages depicted).
    for i in range(1, len(names)):
        names[i] = names[i][30:-13]
        pop = Model(names[i], intergen=False, two_sided_dist=False, experiment=True, vis=True)


test_all_networks_for_suitability()
visualize_networks()






########## PREVIOUS VERSIONS ###########

 def calculate_pseudogens_optimized(self, reverse=False):
        """
        Nearly perfect implementation with constraints aligned to ensure nodes in a union (with children) are always in
        the same generation.  Unproductive unions (unions without children) are allowed to have a generation of difference
        between the two nodes (but no more than one).  Children are one generation beneath their parents UNLESS this violates
        one of the union-related constraints.

        DOES NOT WORK ON GRAPHS WITH CYCLES.

        Single‐pass, bottom‐up constraint propagation on the full parent→child DAG plus marriage edges.
        - Only ever raises generation values (no lowering inside the loop) to guarantee termination.
        - Keeps siblings together by pulling all of a parent’s children up to parent−1 whenever that parent climbs.
        - Enforces both productive (==) and nonproductive (difference ≤1) marriage constraints symmetrically.
        - At the end, “immigrant” spouses with no children are placed in the same generation as their partner.
        Finally, this sets:
          - self.node_to_gen
          - self.final_gen
          - self.parentless.
        """
        ## Better Method.
        # Grab the original DAG and the set of all undirected spouse‐pairs.
        g_dag     = self.og_graph_without_marrs     # Directed: parent → child.
        marriages = set(self.og_marriage_edges)     # Undirected spouse edges.

        # Initialize every node’s generation to zero.
        G = {v: 0 for v in g_dag.nodes()}

        # Build adjacency lists: children, parents, spouses.
        from collections import deque

        children = {v: list(g_dag.successors(v)) for v in g_dag.nodes()}
        parents  = {v: list(g_dag.predecessors(v)) for v in g_dag.nodes()}

        spouses = {v: set() for v in g_dag.nodes()}
        for (u, v) in marriages:
            spouses[u].add(v)
            spouses[v].add(u)

        # Precompute which marriages are “productive” (i.e. u and v share ≥1 child).
        productive = set()
        for (u, v) in marriages:
            if set(children[u]).intersection(children[v]):
                productive.add((u, v))
                productive.add((v, u))

        # ALSO mark *immigrant* spouse‐pairs as productive:
        #    (childless AND parentless, but married).
        childless  = {v for v in g_dag.nodes() if g_dag.out_degree(v) == 0}
        parentless = {v for v in g_dag.nodes() if g_dag.in_degree(v)  == 0}
        for u, v in marriages:
            if (u in childless and u in parentless) or (v in childless and v in parentless):
                productive.add((u, v))
                productive.add((v, u))

        # Initialize a queue with every node (so we relax all constraints at least once).
        queue = deque(g_dag.nodes())

        # Main loop: Keep relaxing until no more raises are needed.
        while queue:
            v = queue.popleft()

            # ─── 5A. ENFORCE parent→child:  G[parent] ≥ G[v] + 1. ───
            for p in parents[v]:
                if G[p] < G[v] + 1:
                    # Raise parent up so it’s one above v.
                    G[p] = G[v] + 1
                    queue.append(p)

                    # ── Pull up all of p’s children to (G[p] − 1). ──
                    desired_child_gen = G[p] - 1
                    for c in children[p]:
                        if G[c] < desired_child_gen:
                            G[c] = desired_child_gen
                            queue.append(c)

            # ─── 5B. ENFORCE marriage constraints for every spouse s of v. ───
            for s in spouses[v]:
                if (v, s) in productive:
                    # PRODUCTIVE: G[v] == G[s], so raise whichever is lower.
                    if G[v] != G[s]:
                        high = max(G[v], G[s])
                        if G[v] < high:
                            G[v] = high
                            queue.append(v)
                        if G[s] < high:
                            G[s] = high
                            queue.append(s)

                else:
                    # NONPRODUCTIVE: enforce |G[v] − G[s]| ≤ 1 by raising the lower.
                    if G[v] < G[s] - 1:
                        # v is too low → raise v to (G[s] − 1).
                        G[v] = G[s] - 1
                        queue.append(v)
                    if G[s] < G[v] - 1:
                        # s is too low → raise s to (G[v] − 1).
                        G[s] = G[v] - 1
                        queue.append(s)

        #    (Optional) Final “exact parent = max(child)+1” smoothing pass:
        #    Pull any parent down to one above its tallest child, but only if it
        #    doesn’t break any productive‐ or nonproductive‐spouse rule.
        for v in g_dag.nodes():
            if children[v]:
                max_child_gen = max(G[c] for c in children[v])
                if G[v] > max_child_gen + 1:
                    candidate = max_child_gen + 1
                    ok = True
                    for s in spouses[v]:
                        if (v, s) in productive:
                            if G[s] != candidate:
                                ok = False
                                break
                        else:
                            if abs(G[s] - candidate) > 1:
                                ok = False
                                break
                    if ok:
                        G[v] = candidate
                        # (One smoothing pass is typically enough.)

        # Reverse layering, if requested (so “oldest = 0” instead of “leaves = 0”).
        if not reverse:
            max_gen = max(G.values(), default=0)
            for v in G:
                G[v] = max_gen - G[v]

        # Densify generations to remove any gaps (so used labels are 0,1,2,…).
        unique_layers = sorted(set(G.values()))
        remap = {old: new for new, old in enumerate(unique_layers)}
        dense = {v: remap[G[v]] for v in G}

        #    Immigrant‐in‐0 census: if one spouse is at 0 and the other isn’t,
        #    place the 0‐spouse in the *same* generation as their partner.
        for (u, v) in marriages:
            if dense[u] == 0 and dense[v] != 0:
                dense[u] = dense[v]
            elif dense[v] == 0 and dense[u] != 0:
                dense[v] = dense[u]

        # Save results back on self.
        self.node_to_gen = dense
        self.final_gen   = max(dense.values(), default=0)

        # Compute parentless set exactly as before (nodes with no parents in g_dag).
        reverse_dag      = g_dag.reverse(copy=False)
        self.parentless = {v for v, nbrs in reverse_dag.adj.items() if not nbrs}

        return dense


def calculate_pseudogens_optimized(self, reverse=False):
        '''
        Algorithm that works on all networks, but places too many childless unions in bottom generation.
        '''
        import networkx as nx
        from collections import defaultdict, deque

        G_orig = self.og_graph_without_marrs
        marriages = set(self.og_marriage_edges)

        # Step 1: Collapse cycles into SCCs to prevent loops
        sccs = list(nx.strongly_connected_components(G_orig))
        node_to_scc = {}
        scc_to_nodes = defaultdict(set)
        for i, scc in enumerate(sccs):
            for node in scc:
                node_to_scc[node] = i
                scc_to_nodes[i].add(node)

        # Step 2: Build SCC-DAG
        scc_graph = nx.DiGraph()
        for u, v in G_orig.edges():
            su, sv = node_to_scc[u], node_to_scc[v]
            if su != sv:
                scc_graph.add_edge(su, sv)

        # Step 3: Topological order for constraint propagation
        scc_order = list(nx.topological_sort(scc_graph))
        scc_level = {scc: 0 for scc in scc_graph.nodes()}

        for scc in reversed(scc_order):
            for succ in scc_graph.successors(scc):
                scc_level[scc] = max(scc_level[scc], scc_level[succ] + 1)

        # Step 4: Assign base generations from SCC levels
        node_gen = {}
        for scc, level in scc_level.items():
            for node in scc_to_nodes[scc]:
                node_gen[node] = level

        # Make sure every node is in the map
        for node in G_orig.nodes():
            if node not in node_gen:
                node_gen[node] = 0

        # Step 5: Propagate parent -> child = +1 constraint strictly
        topo_order = list(nx.topological_sort(G_orig))
        for v in reversed(topo_order):
            for child in G_orig.successors(v):
                required = node_gen[child] + 1
                if node_gen[v] < required:
                    node_gen[v] = required

        # Step 6: Union constraints
        spouses = {v: set() for v in G_orig.nodes()}
        for u, v in marriages:
            spouses[u].add(v)
            spouses[v].add(u)

        productive = set()
        children = {v: list(G_orig.successors(v)) for v in G_orig.nodes()}
        childless = {v for v in G_orig.nodes() if G_orig.out_degree(v) == 0}
        parentless = {v for v in G_orig.nodes() if G_orig.in_degree(v) == 0}
        for u, v in marriages:
            if set(children[u]).intersection(children[v]):
                productive.add((u, v))
                productive.add((v, u))
            elif (u in childless and u in parentless) or (v in childless and v in parentless):
                productive.add((u, v))
                productive.add((v, u))

        for _ in range(2):
            for u, v in marriages:
                if (u, v) in productive:
                    high = max(node_gen[u], node_gen[v])
                    node_gen[u] = high
                    node_gen[v] = high
                else:
                    if abs(node_gen[u] - node_gen[v]) > 1:
                        if node_gen[u] < node_gen[v]:
                            node_gen[u] = node_gen[v] - 1
                        else:
                            node_gen[v] = node_gen[u] - 1

        # Reverse to make generation 0 oldest
        if not reverse:
            max_gen = max(node_gen.values(), default=0)
            for v in node_gen:
                node_gen[v] = max_gen - node_gen[v]

        # Dense remap
        unique = sorted(set(node_gen.values()))
        remap = {g: i for i, g in enumerate(unique)}
        dense = {v: remap[node_gen[v]] for v in node_gen}

        for u, v in marriages:
            if dense[u] == 0 and dense[v] != 0:
                dense[u] = dense[v]
            elif dense[v] == 0 and dense[u] != 0:
                dense[v] = dense[u]

        self.node_to_gen = dense
        self.final_gen = max(dense.values(), default=0)
        reverse_dag = G_orig.reverse(copy=False)
        self.parentless = {v for v, nbrs in reverse_dag.adj.items() if not nbrs}

        return dense
